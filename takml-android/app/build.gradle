////////////////////////////////////////////////////////////////////////////////
//
// PLUGIN_VERSION is the common version name when describing the plugin.
// ATAK_VERSION   is for the version of ATAK this plugin should be compatible
//                with some examples include 3.11.0, 3.11.0.civ 3.11.1.fvey
//
////////////////////////////////////////////////////////////////////////////////

buildscript {

    ext.PLUGIN_VERSION = "1.0"
    ext.ATAK_VERSION = "4.6.1"
    def takdevVersion = '2.+'

    def getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    def getProperty = { name, defValue ->
        def prop = project.properties[name] ?:
                getValueFromPropertiesFile(project.rootProject.file('local.properties'), name)
        return (null == prop) ? defValue : prop
    }

    def urlKey = 'takrepo.url'

    ext.isDevKitEnabled = { ->
        return getProperty(urlKey, null) != null
    }

    ext.takrepoUrl = getProperty(urlKey, 'http://localhost/')
    ext.takrepoUser = getProperty('takrepo.user', 'invalid')
    ext.takrepoPassword = getProperty('takrepo.password', 'invalid')
    ext.takdevPlugin = getProperty('takdev.plugin', "${rootDir}/../../atak-gradle-takdev.jar")

    repositories {
        maven { url "local-repo" }
        mavenCentral()
        google()
        maven {
            url "https://jitpack.io"
        }
        maven {
            url = takrepoUrl
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        if(isDevKitEnabled()) {
            classpath "com.atakmap.gradle:atak-gradle-takdev:${takdevVersion}"
        } else {
            classpath files(takdevPlugin)
        }
    }
}

allprojects {
    repositories {
        maven { url "local-repo" }
        mavenCentral()
        google()
        maven {
            url "https://jitpack.io"
        }
        maven { url "https://repo.eclipse.org/content/repositories/paho-snapshots/" }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'atak-takdev-plugin'

// Attempt to get a suitable version name for the plugin based on
// either a git or svn repository
def getVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
            standardOutput = stdout
        }
        def describe = stdout.toString().trim()
        println("versionName[git]: $describe")
        return describe
    } catch (Exception ignored) {
        println("error occured, using revision of 1")
        return 1
    }
}


// Attempt to get a suitable version code for the plugin based on
// either a git or svn repository
def getVersionCode() {
    try {
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = 'git'
                args = ['show', '-s', '--format=%ct']
                standardOutput = os
                ignoreExitValue = true
            }

            def outputAsString = os.toString()
            ext.revision = "$outputAsString".toInteger()

            println("version[git]: $revision")
        }
    } catch (Exception ignored) {
        println("error occured, using revision of 1")
        ext.revision = 1
    }

    return revision
}


android {
    compileSdkVersion 31
    buildToolsVersion "29.0.2"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        jumboMode = true
    }

    lintOptions {
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError true
    }

    signingConfigs {

        debug {

            storeFile file("${buildDir}/android_keystore")

            storePassword "tnttnt"

            keyAlias "wintec_mapping"

            keyPassword "tnttnt"

        }

        release {

            storeFile file("${buildDir}/android_keystore")

            storePassword "tnttnt"

            keyAlias "wintec_mapping"

            keyPassword "tnttnt"

        }

    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['sdk']
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-gradle.txt', 'proguard-rules.pro'
            signingConfig signingConfigs.release
            matchingFallbacks = ['odk']
        }
    }

    flavorDimensions "application"

    productFlavors {
        mil {
            getIsDefault().set(true)
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".MIL"]
        }
        civ {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
        }
        fvey {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".FVEY"]
        }
        aus {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".AUS"]
            matchingFallbacks = 'fvey'
        }
        nzl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NZL"]
            matchingFallbacks = 'fvey'
        }
        prt {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".PRT"]
            matchingFallbacks = 'fvey'
        }
        nor {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NOR"]
        }
        hun {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".HUN"]
        }
        bel {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".BEL"]
            matchingFallbacks = 'fvey'
        }
        gov {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]  // CIV API with possible distributiion restrictions (see PluginTemplate)
        }
        swe {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".SWE"]
        }
        natosof {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NATOSOF"]
        }
        gbr {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".GBR"]
            matchingFallbacks = 'fvey'
        }
        can {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CAN"]
            matchingFallbacks = 'fvey'
        }
        intl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".INTL"]
            matchingFallbacks = 'fvey'
        }
    }

    packagingOptions {
        pickFirst 'META-INF/DEPENDENCIES'
        pickFirst 'org/apache/commons/codec/language/bm/*'
        pickFirst 'org/apache/commons/codec/language/*'
        pickFirst 'org/apache/log4j/lf5/config/*'
        pickFirst 'org/apache/log4j/lf5/viewer/images/*'
        pickFirst 'META-INF/native-image/io.netty/transport/*'
        pickFirst 'org/apache/log4j/xml/*'
        pickFirst 'META-INF/native-image/io.netty/codec-http/*'
        pickFirst 'META-INF/native-image/**'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/io.netty.versions.properties'
        exclude 'META-INF/ASL-2.0.txt'
        exclude 'META-INF/LGPL-3.0.txt'
        exclude 'gdal/data/*'
        exclude 'com/healthmarketscience/jackcess/*'
        exclude 'org/achartengine/image/*'
        exclude 'com/partech/pgscmedia/*'
        exclude 'gov/nasa/worldwind/util/glu/*'
        exclude 'com/atakmap/android/maps/*'
        exclude 'libs/atak-sdk-4.1.0-mil.jar'
        exclude 'libs/org.eclipse.paho.client.mqttv3-1.2.4.jar'
        exclude 'TAKML_Constants.*'
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"
        }

        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }

    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 31
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
    }

}

configurations {
    all*.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    //all*.exclude group: 'com.google.code.gson'
    //all*.exclude group: 'javax.xml.bind'
    //all*.exclude group: 'com.fasterxml.jackson.datatype'
    //all*.exclude group: 'com.fasterxml.jackson.core'
}


dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    implementation 'io.moquette:moquette-broker:0.15'
    //implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.4'
    implementation('com.bbn.tak.takml:takml-sdk-shared:0.0.3'){
        exclude group: 'org.threeten'
    }
    implementation('com.bbn.tak.takml:takml-sdk-android:0.0.1'){
        exclude group: 'org.threeten'
    }
    //implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.13.0'
    implementation group: 'org.apache.httpcomponents' , name: 'httpclient-android' , version: '4.3.5.1'
    implementation group: 'net.oneandone.reflections8', name: 'reflections8', version: '0.11.7'
    implementation('de.fraunhofer.iosb.ilt:FROST-Client:0.34'){
        exclude group: 'org.threeten'
        //exclude group: 'javax.xml.bind'
        //exclude group: 'com.fasterxml.jackson.datatype'
        //exclude group: 'com.fasterxml.jackson.core'
    }
    implementation 'de.fraunhofer.iosb.ilt:SensorThings-SWE-Common:0.5'
    implementation 'de.fraunhofer.iosb.ilt:Configurable:0.22'
    implementation'commons-io:commons-io:2.7'
    implementation group: 'io.leangen.geantyref', name: 'geantyref', version: '1.3.11'
    implementation group: 'de.mindpipe.android', name: 'android-logging-log4j', version: '1.0.2'
    implementation group: 'de.grundid.opendatalab', name: 'geojson-jackson', version: '1.0'
    compileOnly 'org.threeten:threeten-extra:1.5.0'

}

