
15:43:52.563 [             main] INFO   d.f.iosb.ilt.statests.TestSuite - Result of sql master query:
stdout:
--
-- PostgreSQL database dump
--


-- Dumped from database version 11.9
-- Dumped by pg_dump version 11.9

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: tiger; Type: SCHEMA; Schema: -; Owner: sensorthings
--

CREATE SCHEMA tiger;


ALTER SCHEMA tiger OWNER TO sensorthings;

--
-- Name: tiger_data; Type: SCHEMA; Schema: -; Owner: sensorthings
--

CREATE SCHEMA tiger_data;


ALTER SCHEMA tiger_data OWNER TO sensorthings;

--
-- Name: topology; Type: SCHEMA; Schema: -; Owner: sensorthings
--

CREATE SCHEMA topology;


ALTER SCHEMA topology OWNER TO sensorthings;

--
-- Name: SCHEMA topology; Type: COMMENT; Schema: -; Owner: sensorthings
--

COMMENT ON SCHEMA topology IS 'PostGIS Topology schema';


--
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: 

--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA public;


--
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- Name: postgis_tiger_geocoder; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder WITH SCHEMA tiger;


--
-- Name: EXTENSION postgis_tiger_geocoder; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis_tiger_geocoder IS 'PostGIS tiger geocoder and reverse geocoder';


--
-- Name: postgis_topology; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis_topology WITH SCHEMA topology;


--
-- Name: EXTENSION postgis_topology; Type: COMMENT; Schema: -; Owner: 

--

COMMENT ON EXTENSION postgis_topology IS 'PostGIS topology spatial types and functions';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: datastreams_update_delete(); Type: FUNCTION; Schema: public; Owner: sensorthings
--

CREATE FUNCTION public.datastreams_update_delete() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
"DS_ROW" "DATASTREAMS"%rowtype;
"MDS_ROW" "MULTI_DATASTREAMS"%rowtype;
begin

if (OLD."DATASTREAM_ID" is not null) 
then
	select * into "DS_ROW" from "DATASTREAMS" where "DATASTREAMS"."ID"=OLD."DATASTREAM_ID";

	if (OLD."PHENOMENON_TIME_START" = "DS_ROW"."PHENOMENON_TIME_START"
		or coalesce(OLD."PHENOMENON_TIME_END", OLD."PHENOMENON_TIME_START") = "DS_ROW"."PHENOMENON_TIME_END")
	then
		update "DATASTREAMS"
			set "PHENOMENON_TIME_START" = (select min("PHENOMENON_TIME_START") from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "DS_ROW"."ID")
			where "DATASTREAMS"."ID" = "DS_ROW"."ID";
		update "DATASTREAMS"
			set "PHENOMENON_TIME_END" = (select max(coalesce("PHENOMENON_TIME_END", "PHENOMENON_TIME_START")) from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "DS_ROW"."ID")
			where "DATASTREAMS"."ID" = "DS_ROW"."ID";
	end if;

	if (OLD."RESULT_TIME" = "DS_ROW"."RESULT_TIME_START")
	then
		update "DATASTREAMS"
			set "RESULT_TIME_START" = (select min("RESULT_TIME") from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "DS_ROW"."ID")
			where "DATASTREAMS"."ID" = "DS_ROW"."ID";
	end if;
	if (OLD."RESULT_TIME" = "DS_ROW"."RESULT_TIME_END")
	then
		update "DATASTREAMS"
			set "RESULT_TIME_END" = (select max("RESULT_TIME") from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "DS_ROW"."ID")
			where "DATASTREAMS"."ID" = "DS_ROW"."ID";
	end if;

end if;	

if (OLD."MULTI_DATASTREAM_ID" is not null) 
then
	select * into "MDS_ROW" from "MULTI_DATASTREAMS" where "MULTI_DATASTREAMS"."ID"=OLD."MULTI_DATASTREAM_ID";

	if (OLD."PHENOMENON_TIME_START" = "DS_ROW"."PHENOMENON_TIME_START"
		or coalesce(OLD."PHENOMENON_TIME_END", OLD."PHENOMENON_TIME_START") = "MDS_ROW"."PHENOMENON_TIME_END")
	then
		update "MULTI_DATASTREAMS"
			set "PHENOMENON_TIME_START" = (select min("PHENOMENON_TIME_START") from "OBSERVATIONS" where "OBSERVATIONS"."MULTI_DATASTREAM_ID" = "MDS_ROW"."ID")
			where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
		update "MULTI_DATASTREAMS"
			set "PHENOMENON_TIME_END" = (select max(coalesce("PHENOMENON_TIME_END", "PHENOMENON_TIME_START")) from "OBSERVATIONS" where "OBSERVATIONS"."MULTI_DATASTREAM_ID" = "MDS_ROW"."ID")
			where "DATASTREAMS"."ID" = "MDS_ROW"."ID";
	end if;

	if (OLD."RESULT_TIME" = "MDS_ROW"."RESULT_TIME_START")
	then
		update "MULTI_DATASTREAMS"
			set "RESULT_TIME_START" = (select min("RESULT_TIME") from "OBSERVATIONS" where "OBSERVATIONS"."MULTI_DATASTREAM_ID" = "MDS_ROW"."ID")
			where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
	end if;
	if (OLD."RESULT_TIME" = "MDS_ROW"."RESULT_TIME_END")
	then
		update "MULTI_DATASTREAMS"
			set "RESULT_TIME_END" = (select max("RESULT_TIME") from "OBSERVATIONS" where "OBSERVATIONS"."MULTI_DATASTREAM_ID" = "MDS_ROW"."ID")
			where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
	end if;

end if;	


return NULL;
end
$$;



ALTER FUNCTION public.datastreams_update_delete() OWNER TO sensorthings;

--
-- Name: datastreams_update_insert(); Type: FUNCTION; Schema: public; Owner: sensorthings
--

CREATE FUNCTION public.datastreams_update_insert() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
"DS_ROW" "DATASTREAMS"%rowtype;
"MDS_ROW" "MULTI_DATASTREAMS"%rowtype;
begin

if (NEW."DATASTREAM_ID" is not null) 
then 
	select * into "DS_ROW" from "DATASTREAMS" where "DATASTREAMS"."ID"=NEW."DATASTREAM_ID";
	if (NEW."PHENOMENON_TIME_START"<"DS_ROW"."PHENOMENON_TIME_START" or "DS_ROW"."PHENOMENON_TIME_START" is null) then
		update "DATASTREAMS" set "PHENOMENON_TIME_START" = NEW."PHENOMENON_TIME_START" where "DATASTREAMS"."ID" = "DS_ROW"."ID";
	end if;
	if (coalesce(NEW."PHENOMENON_TIME_END", NEW."PHENOMENON_TIME_START") > "DS_ROW"."PHENOMENON_TIME_END" or "DS_ROW"."PHENOMENON_TIME_END" is null) then
		update "DATASTREAMS" set "PHENOMENON_TIME_END" = coalesce(NEW."PHENOMENON_TIME_END", NEW."PHENOMENON_TIME_START") where "DATASTREAMS"."ID" = "DS_ROW"."ID";
	end if;

	if (NEW."RESULT_TIME"<"DS_ROW"."RESULT_TIME_START" or "DS_ROW"."RESULT_TIME_START" is null) then
		update "DATASTREAMS" set "RESULT_TIME_START" = NEW."RESULT_TIME" where "DATASTREAMS"."ID" = "DS_ROW"."ID";
	end if;
	if (NEW."RESULT_TIME" > "DS_ROW"."RESULT_TIME_END" or "DS_ROW"."RESULT_TIME_END" is null) then
		update "DATASTREAMS" set "RESULT_TIME_END" = NEW."RESULT_TIME" where "DATASTREAMS"."ID" = "DS_ROW"."ID";
	end if;

	update "DATASTREAMS" SET "OBSERVED_AREA" = ST_ConvexHull(ST_Collect("OBSERVED_AREA", (select "GEOM" from "FEATURES" where "ID"=NEW."FEATURE_ID"))) where "DATASTREAMS"."ID"=NEW."DATASTREAM_ID";
end if;

if (NEW."MULTI_DATASTREAM_ID" is not null) 
then 
	select * into "MDS_ROW" from "MULTI_DATASTREAMS" where "MULTI_DATASTREAMS"."ID"=NEW."MULTI_DATASTREAM_ID";
	if (NEW."PHENOMENON_TIME_START"<"MDS_ROW"."PHENOMENON_TIME_START" or "MDS_ROW"."PHENOMENON_TIME_START" is null) then
		update "MULTI_DATASTREAMS" set "PHENOMENON_TIME_START" = NEW."PHENOMENON_TIME_START" where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
	end if;
	if (coalesce(NEW."PHENOMENON_TIME_END", NEW."PHENOMENON_TIME_START") > "MDS_ROW"."PHENOMENON_TIME_END" or "MDS_ROW"."PHENOMENON_TIME_END" is null) then
		update "MULTI_DATASTREAMS" set "PHENOMENON_TIME_END" = coalesce(NEW."PHENOMENON_TIME_END", NEW."PHENOMENON_TIME_START") where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
	end if;

	if (NEW."RESULT_TIME"<"MDS_ROW"."RESULT_TIME_START" or "MDS_ROW"."RESULT_TIME_START" is null) then
		update "MULTI_DATASTREAMS" set "RESULT_TIME_START" = NEW."RESULT_TIME" where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
	end if;
	if (NEW."RESULT_TIME" > "MDS_ROW"."RESULT_TIME_END" or "MDS_ROW"."RESULT_TIME_END" is null) then
		update "MULTI_DATASTREAMS" set "RESULT_TIME_END" = NEW."RESULT_TIME" where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
	end if;

	update "MULTI_DATASTREAMS" SET "OBSERVED_AREA" = ST_ConvexHull(ST_Collect("OBSERVED_AREA", (select "GEOM" from "FEATURES" where "ID"=NEW."FEATURE_ID"))) where "MULTI_DATASTREAMS"."ID"=NEW."MULTI_DATASTREAM_ID";
end if;

return new;
END
$$;



ALTER FUNCTION public.datastreams_update_insert() OWNER TO sensorthings;

--
-- Name: datastreams_update_update(); Type: FUNCTION; Schema: public; Owner: sensorthings
--

CREATE FUNCTION public.datastreams_update_update() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
"DS_ROW" "DATASTREAMS"%rowtype;
"MDS_ROW" "MULTI_DATASTREAMS"%rowtype;
begin

if (NEW."DATASTREAM_ID" is not null) 
then 
	if (NEW."PHENOMENON_TIME_START" != OLD."PHENOMENON_TIME_START" or NEW."PHENOMENON_TIME_END" != OLD."PHENOMENON_TIME_END") then
		for "DS_ROW" in select * from "DATASTREAMS" where "ID"=NEW."DATASTREAM_ID"
		loop
			if (NEW."PHENOMENON_TIME_START"<"DS_ROW"."PHENOMENON_TIME_START") then
				update "DATASTREAMS" set "PHENOMENON_TIME_START" = NEW."PHENOMENON_TIME_START" where "DATASTREAMS"."ID" = "DS_ROW"."ID";
			end if;
			if (coalesce(NEW."PHENOMENON_TIME_END", NEW."PHENOMENON_TIME_START") > "DS_ROW"."PHENOMENON_TIME_END") then
				update "DATASTREAMS" set "PHENOMENON_TIME_END" = coalesce(NEW."PHENOMENON_TIME_END", NEW."PHENOMENON_TIME_START") where "DATASTREAMS"."ID" = "DS_ROW"."ID";
			end if;

			if (OLD."PHENOMENON_TIME_START" = "DS_ROW"."PHENOMENON_TIME_START"
				or coalesce(OLD."PHENOMENON_TIME_END", OLD."PHENOMENON_TIME_START") = "DS_ROW"."PHENOMENON_TIME_END")
			then
				update "DATASTREAMS"
					set "PHENOMENON_TIME_START" = (select min("PHENOMENON_TIME_START") from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "DS_ROW"."ID")
					where "DATASTREAMS"."ID" = "DS_ROW"."ID";
				update "DATASTREAMS"
					set "PHENOMENON_TIME_END" = (select max(coalesce("PHENOMENON_TIME_END", "PHENOMENON_TIME_START")) from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "DS_ROW"."ID")
					where "DATASTREAMS"."ID" = "DS_ROW"."ID";
			end if;
		end loop;
		return NEW;
	end if;


	if (NEW."RESULT_TIME" != OLD."RESULT_TIME") then
		for "DS_ROW" in select * from "DATASTREAMS" where "ID"=NEW."DATASTREAM_ID"
		loop
			if (NEW."RESULT_TIME" < "DS_ROW"."RESULT_TIME_START") then
				update "DATASTREAMS" set "RESULT_TIME_START" = NEW."RESULT_TIME" where "ID" = "DS_ROW"."ID";
			end if;
			if (NEW."RESULT_TIME" > "DS_ROW"."RESULT_TIME_END") then
				update "DATASTREAMS" set "RESULT_TIME_END" = NEW."RESULT_TIME" where "ID" = "DS_ROW"."ID";
			end if;

			if (OLD."RESULT_TIME" = "DS_ROW"."RESULT_TIME_START")
			then
				update "DATASTREAMS"
					set "RESULT_TIME_START" = (select min("RESULT_TIME") from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "DS_ROW"."ID")
					where "DATASTREAMS"."ID" = "DS_ROW"."ID";
			end if;
			if (OLD."RESULT_TIME" = "DS_ROW"."RESULT_TIME_END")
			then
				update "DATASTREAMS"
					set "RESULT_TIME_END" = (select max("RESULT_TIME") from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "DS_ROW"."ID")
					where "DATASTREAMS"."ID" = "DS_ROW"."ID";
			end if;
		end loop;
		return NEW;
	end if;
end if;

if (NEW."MULTI_DATASTREAM_ID" is not null) 
then 
	if (NEW."PHENOMENON_TIME_START" != OLD."PHENOMENON_TIME_START" or NEW."PHENOMENON_TIME_END" != OLD."PHENOMENON_TIME_END") then
		select * into "MDS_ROW" from "MULTI_DATASTREAMS" where "MULTI_DATASTREAMS"."ID"=NEW."MULTI_DATASTREAM_ID";
		
		if (NEW."PHENOMENON_TIME_START"<"MDS_ROW"."PHENOMENON_TIME_START") then
			update "MULTI_DATASTREAMS" set "PHENOMENON_TIME_START" = NEW."PHENOMENON_TIME_START" where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
		end if;
		if (coalesce(NEW."PHENOMENON_TIME_END", NEW."PHENOMENON_TIME_START") > "MDS_ROW"."PHENOMENON_TIME_END") then
			update "MULTI_DATASTREAMS" set "PHENOMENON_TIME_END" = coalesce(NEW."PHENOMENON_TIME_END", NEW."PHENOMENON_TIME_START") where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
		end if;

		if (OLD."PHENOMENON_TIME_START" = "MDS_ROW"."PHENOMENON_TIME_START"
			or coalesce(OLD."PHENOMENON_TIME_END", OLD."PHENOMENON_TIME_START") = "MDS_ROW"."PHENOMENON_TIME_END")
		then
			update "MULTI_DATASTREAMS"
				set "PHENOMENON_TIME_START" = (select min("PHENOMENON_TIME_START") from "OBSERVATIONS" where "OBSERVATIONS"."MULTI_DATASTREAM_ID" = "MDS_ROW"."ID")
				where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
			update "MULTI_DATASTREAMS"
				set "PHENOMENON_TIME_END" = (select max(coalesce("PHENOMENON_TIME_END", "PHENOMENON_TIME_START")) from "OBSERVATIONS" where "OBSERVATIONS"."MULTI_DATASTREAM_ID" = "MDS_ROW"."ID")
				where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
		end if;
		
		return NEW;
	end if;


	if (NEW."RESULT_TIME" != OLD."RESULT_TIME") then
		select * into "MDS_ROW" from "MULTI_DATASTREAMS" where "MULTI_DATASTREAMS"."ID"=NEW."MULTI_DATASTREAM_ID";
		
		if (NEW."RESULT_TIME" < "MDS_ROW"."RESULT_TIME_START") then
			update "MULTI_DATASTREAMS" set "RESULT_TIME_START" = NEW."RESULT_TIME" where "ID" = "MDS_ROW"."ID";
		end if;
		if (NEW."RESULT_TIME" > "MDS_ROW"."RESULT_TIME_END") then
			update "MULTI_DATASTREAMS" set "RESULT_TIME_END" = NEW."RESULT_TIME" where "ID" = "MDS_ROW"."ID";
		end if;

		if (OLD."RESULT_TIME" = "MDS_ROW"."RESULT_TIME_START")
		then
			update "MULTI_DATASTREAMS"
				set "RESULT_TIME_START" = (select min("RESULT_TIME") from "OBSERVATIONS" where "OBSERVATIONS"."DATASTREAM_ID" = "MDS_ROW"."ID")
				where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
		end if;
		if (OLD."RESULT_TIME" = "MDS_ROW"."RESULT_TIME_END")
		then
			update "MULTI_DATASTREAMS"
				set "RESULT_TIME_END" = (select max("RESULT_TIME") from "OBSERVATIONS" where "OBSERVATIONS"."MULTI_DATASTREAM_ID" = "MDS_ROW"."ID")
				where "MULTI_DATASTREAMS"."ID" = "MDS_ROW"."ID";
		end if;

		return NEW;
	end if;
end if;


return new;
END
$$;



ALTER FUNCTION public.datastreams_update_update() OWNER TO sensorthings;

--
-- Name: safe_cast_to_boolean(jsonb); Type: FUNCTION; Schema: public; Owner: sensorthings
--

CREATE FUNCTION public.safe_cast_to_boolean(v_input jsonb) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE v_bool_value BOOLEAN DEFAULT NULL;
BEGIN
    IF jsonb_typeof(v_input) = 'boolean' THEN
        RETURN (v_input#>>'{}')::boolean;
    ELSE
        RETURN NULL;
    END IF;
END;
$$;


ALTER FUNCTION public.safe_cast_to_boolean(v_input jsonb) OWNER TO sensorthings;

--
-- Name: safe_cast_to_numeric(jsonb); Type: FUNCTION; Schema: public; Owner: sensorthings
--

CREATE FUNCTION public.safe_cast_to_numeric(v_input jsonb) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE v_num_value NUMERIC DEFAULT NULL;
BEGIN
    IF jsonb_typeof(v_input) = 'number' THEN
        RETURN (v_input#>>'{}')::numeric;
    ELSE
        RETURN NULL;
    END IF;
END;
$$;


ALTER FUNCTION public.safe_cast_to_numeric(v_input jsonb) OWNER TO sensorthings;


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: ACTUATORS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."ACTUATORS" (
    "ID" bigint NOT NULL,
    "NAME" text,
    "DESCRIPTION" text,
    "PROPERTIES" jsonb,
    "ENCODING_TYPE" text,
    "METADATA" text
);


ALTER TABLE public."ACTUATORS" OWNER TO sensorthings;

--
-- Name: ACTUATORS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."ACTUATORS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."ACTUATORS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: DATASTREAMS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."DATASTREAMS" (
    "ID" bigint NOT NULL,
    "DESCRIPTION" text,
    "OBSERVATION_TYPE" text,
    "PHENOMENON_TIME_START" timestamp with time zone,
    "PHENOMENON_TIME_END" timestamp with time zone,
    "RESULT_TIME_START" timestamp with time zone,
    "RESULT_TIME_END" timestamp with time zone,
    "SENSOR_ID" bigint NOT NULL,
    "OBS_PROPERTY_ID" bigint NOT NULL,
    "THING_ID" bigint NOT NULL,
    "UNIT_NAME" character varying(255),
    "UNIT_SYMBOL" character varying(255),
    "UNIT_DEFINITION" character varying(255),
    "NAME" text DEFAULT 'no name'::text,
    "OBSERVED_AREA" public.geometry(Geometry,4326),
    "PROPERTIES" jsonb
);



ALTER TABLE public."DATASTREAMS" OWNER TO sensorthings;

--
-- Name: DATASTREAMS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."DATASTREAMS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."DATASTREAMS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: FEATURES; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."FEATURES" (
    "ID" bigint NOT NULL,
    "DESCRIPTION" text,
    "ENCODING_TYPE" text,
    "FEATURE" text,
    "GEOM" public.geometry(Geometry,4326),
    "NAME" text DEFAULT 'no name'::text,
    "PROPERTIES" jsonb
);


ALTER TABLE public."FEATURES" OWNER TO sensorthings;

--
-- Name: FEATURES_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."FEATURES" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."FEATURES_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



--
-- Name: HIST_LOCATIONS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."HIST_LOCATIONS" (
    "ID" bigint NOT NULL,
    "TIME" timestamp with time zone,
    "THING_ID" bigint NOT NULL
);


ALTER TABLE public."HIST_LOCATIONS" OWNER TO sensorthings;

--
-- Name: HIST_LOCATIONS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."HIST_LOCATIONS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."HIST_LOCATIONS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: LOCATIONS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."LOCATIONS" (
    "ID" bigint NOT NULL,
    "DESCRIPTION" text,
    "ENCODING_TYPE" text,
    "LOCATION" text,
    "GEOM" public.geometry(Geometry,4326),
    "NAME" text DEFAULT 'no name'::text,
    "GEN_FOI_ID" bigint,
    "PROPERTIES" jsonb
);


ALTER TABLE public."LOCATIONS" OWNER TO sensorthings;

--
-- Name: LOCATIONS_HIST_LOCATIONS; Type: TABLE; Schema: public; Owner: sensorthings

--

CREATE TABLE public."LOCATIONS_HIST_LOCATIONS" (
    "LOCATION_ID" bigint NOT NULL,
    "HIST_LOCATION_ID" bigint NOT NULL
);


ALTER TABLE public."LOCATIONS_HIST_LOCATIONS" OWNER TO sensorthings;

--
-- Name: LOCATIONS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."LOCATIONS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."LOCATIONS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MULTI_DATASTREAMS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."MULTI_DATASTREAMS" (
    "ID" bigint NOT NULL,
    "NAME" text,
    "DESCRIPTION" text,
    "OBSERVATION_TYPES" jsonb,
    "PHENOMENON_TIME_START" timestamp with time zone,
    "PHENOMENON_TIME_END" timestamp with time zone,
    "RESULT_TIME_START" timestamp with time zone,
    "RESULT_TIME_END" timestamp with time zone,
    "SENSOR_ID" bigint NOT NULL,
    "THING_ID" bigint NOT NULL,
    "UNIT_OF_MEASUREMENTS" jsonb,
    "OBSERVED_AREA" public.geometry(Geometry,4326),
    "PROPERTIES" jsonb
);



ALTER TABLE public."MULTI_DATASTREAMS" OWNER TO sensorthings;

--
-- Name: MULTI_DATASTREAMS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."MULTI_DATASTREAMS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."MULTI_DATASTREAMS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: MULTI_DATASTREAMS_OBS_PROPERTIES; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."MULTI_DATASTREAMS_OBS_PROPERTIES" (
    "MULTI_DATASTREAM_ID" bigint NOT NULL,
    "OBS_PROPERTY_ID" bigint NOT NULL,
    "RANK" integer NOT NULL
);


ALTER TABLE public."MULTI_DATASTREAMS_OBS_PROPERTIES" OWNER TO sensorthings;

--
-- Name: OBSERVATIONS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."OBSERVATIONS" (
    "ID" bigint NOT NULL,
    "PHENOMENON_TIME_START" timestamp with time zone,
    "PHENOMENON_TIME_END" timestamp with time zone,
    "RESULT_TIME" timestamp with time zone,
    "RESULT_NUMBER" double precision,
    "RESULT_STRING" text,
    "RESULT_QUALITY" jsonb,
    "VALID_TIME_START" timestamp with time zone,
    "VALID_TIME_END" timestamp with time zone,
    "PARAMETERS" jsonb,
    "DATASTREAM_ID" bigint,
    "FEATURE_ID" bigint NOT NULL,
    "RESULT_TYPE" smallint,
    "RESULT_JSON" jsonb,
    "RESULT_BOOLEAN" boolean,
    "MULTI_DATASTREAM_ID" bigint
);



ALTER TABLE public."OBSERVATIONS" OWNER TO sensorthings;

--
-- Name: OBSERVATIONS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."OBSERVATIONS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."OBSERVATIONS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: OBS_PROPERTIES; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."OBS_PROPERTIES" (
    "ID" bigint NOT NULL,
    "NAME" text,
    "DEFINITION" text,
    "DESCRIPTION" text,
    "PROPERTIES" jsonb
);


ALTER TABLE public."OBS_PROPERTIES" OWNER TO sensorthings;

--
-- Name: OBS_PROPERTIES_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."OBS_PROPERTIES" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."OBS_PROPERTIES_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: SENSORS; Type: TABLE; Schema: public; Owner: sensorthings

--

CREATE TABLE public."SENSORS" (
    "ID" bigint NOT NULL,
    "DESCRIPTION" text,
    "ENCODING_TYPE" text,
    "METADATA" text,
    "NAME" text DEFAULT 'no name'::text,
    "PROPERTIES" jsonb
);


ALTER TABLE public."SENSORS" OWNER TO sensorthings;

--
-- Name: SENSORS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."SENSORS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."SENSORS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: TASKINGCAPABILITIES; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."TASKINGCAPABILITIES" (
    "ID" bigint NOT NULL,
    "NAME" text,
    "DESCRIPTION" text,
    "PROPERTIES" jsonb,
    "TASKING_PARAMETERS" jsonb,
    "ACTUATOR_ID" bigint NOT NULL,
    "THING_ID" bigint NOT NULL
);


ALTER TABLE public."TASKINGCAPABILITIES" OWNER TO sensorthings;

--
-- Name: TASKINGCAPABILITIES_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings

--

ALTER TABLE public."TASKINGCAPABILITIES" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."TASKINGCAPABILITIES_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: TASKS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."TASKS" (
    "ID" bigint NOT NULL,
    "CREATION_TIME" timestamp with time zone,
    "TASKING_PARAMETERS" jsonb,
    "TASKINGCAPABILITY_ID" bigint NOT NULL
);


ALTER TABLE public."TASKS" OWNER TO sensorthings;

--
-- Name: TASKS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."TASKS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."TASKS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: THINGS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."THINGS" (
    "ID" bigint NOT NULL,
    "DESCRIPTION" text,
    "PROPERTIES" jsonb,
    "NAME" text DEFAULT 'no name'::text
);



ALTER TABLE public."THINGS" OWNER TO sensorthings;

--
-- Name: THINGS_ID_seq; Type: SEQUENCE; Schema: public; Owner: sensorthings
--

ALTER TABLE public."THINGS" ALTER COLUMN "ID" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."THINGS_ID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: THINGS_LOCATIONS; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public."THINGS_LOCATIONS" (
    "THING_ID" bigint NOT NULL,
    "LOCATION_ID" bigint NOT NULL
);


ALTER TABLE public."THINGS_LOCATIONS" OWNER TO sensorthings;

--
-- Name: databasechangelog; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public.databasechangelog (
    id character varying(255) NOT NULL,
    author character varying(255) NOT NULL,
    filename character varying(255) NOT NULL,
    dateexecuted timestamp without time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20),
    contexts character varying(255),
    labels character varying(255),
    deployment_id character varying(10)
);



ALTER TABLE public.databasechangelog OWNER TO sensorthings;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: public; Owner: sensorthings
--

CREATE TABLE public.databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp without time zone,
    lockedby character varying(255)
);


ALTER TABLE public.databasechangeloglock OWNER TO sensorthings;

--
-- Data for Name: ACTUATORS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."ACTUATORS" ("ID", "NAME", "DESCRIPTION", "PROPERTIES", "ENCODING_TYPE", "METADATA") FROM stdin;
\.


--
-- Data for Name: DATASTREAMS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."DATASTREAMS" ("ID", "DESCRIPTION", "OBSERVATION_TYPE", "PHENOMENON_TIME_START", "PHENOMENON_TIME_END", "RESULT_TIME_START", "RESULT_TIME_END", "SENSOR_ID", "OBS_PROPERTY_ID", "THING_ID", "UNIT_NAME", "UNIT_SYMBOL", "UNIT_DEFINITION", "NAME", "OBSERVED_AREA", "PROPERTIES") FROM stdin;
\.


--
-- Data for Name: FEATURES; Type: TABLE DATA; Schema: public; Owner: sensorthings

--

COPY public."FEATURES" ("ID", "DESCRIPTION", "ENCODING_TYPE", "FEATURE", "GEOM", "NAME", "PROPERTIES") FROM stdin;
\.


--
-- Data for Name: HIST_LOCATIONS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."HIST_LOCATIONS" ("ID", "TIME", "THING_ID") FROM stdin;
\.


--
-- Data for Name: LOCATIONS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."LOCATIONS" ("ID", "DESCRIPTION", "ENCODING_TYPE", "LOCATION", "GEOM", "NAME", "GEN_FOI_ID", "PROPERTIES") FROM stdin;
\.


--
-- Data for Name: LOCATIONS_HIST_LOCATIONS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."LOCATIONS_HIST_LOCATIONS" ("LOCATION_ID", "HIST_LOCATION_ID") FROM stdin;
\.


--
-- Data for Name: MULTI_DATASTREAMS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."MULTI_DATASTREAMS" ("ID", "NAME", "DESCRIPTION", "OBSERVATION_TYPES", "PHENOMENON_TIME_START", "PHENOMENON_TIME_END", "RESULT_TIME_START", "RESULT_TIME_END", "SENSOR_ID", "THING_ID", "UNIT_OF_MEASUREMENTS", "OBSERVED_AREA", "PROPERTIES") FROM stdin;

\.


--
-- Data for Name: MULTI_DATASTREAMS_OBS_PROPERTIES; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."MULTI_DATASTREAMS_OBS_PROPERTIES" ("MULTI_DATASTREAM_ID", "OBS_PROPERTY_ID", "RANK") FROM stdin;
\.


--
-- Data for Name: OBSERVATIONS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."OBSERVATIONS" ("ID", "PHENOMENON_TIME_START", "PHENOMENON_TIME_END", "RESULT_TIME", "RESULT_NUMBER", "RESULT_STRING", "RESULT_QUALITY", "VALID_TIME_START", "VALID_TIME_END", "PARAMETERS", "DATASTREAM_ID", "FEATURE_ID", "RESULT_TYPE", "RESULT_JSON", "RESULT_BOOLEAN", "MULTI_DATASTREAM_ID") FROM stdin;
\.


--
-- Data for Name: OBS_PROPERTIES; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."OBS_PROPERTIES" ("ID", "NAME", "DEFINITION", "DESCRIPTION", "PROPERTIES") FROM stdin;
\.


--
-- Data for Name: SENSORS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."SENSORS" ("ID", "DESCRIPTION", "ENCODING_TYPE", "METADATA", "NAME", "PROPERTIES") FROM stdin;

\.


--
-- Data for Name: TASKINGCAPABILITIES; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."TASKINGCAPABILITIES" ("ID", "NAME", "DESCRIPTION", "PROPERTIES", "TASKING_PARAMETERS", "ACTUATOR_ID", "THING_ID") FROM stdin;
\.


--
-- Data for Name: TASKS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."TASKS" ("ID", "CREATION_TIME", "TASKING_PARAMETERS", "TASKINGCAPABILITY_ID") FROM stdin;
\.


--
-- Data for Name: THINGS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."THINGS" ("ID", "DESCRIPTION", "PROPERTIES", "NAME") FROM stdin;
\.


--
-- Data for Name: THINGS_LOCATIONS; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public."THINGS_LOCATIONS" ("THING_ID", "LOCATION_ID") FROM stdin;
\.


--
-- Data for Name: databasechangelog; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public.databasechangelog (id, author, filename, dateexecuted, orderexecuted, exectype, md5sum, description, comments, tag, liquibase, contexts, labels, deployment_id) FROM stdin;

20160616-datastreams	scf	tables.xml	2020-09-04 15:43:49.350119	1	EXECUTED	8:62d3256e54f61a497e958ce06d194942	createTable tableName=DATASTREAMS		\N	3.10.2	\N	\N	9248629009
20160616-features	scf	tables.xml	2020-09-04 15:43:49.388271	2	EXECUTED	8:5e3348615bd0e3ff40ab4fcea3cc62f0	createTable tableName=FEATURES		\N	3.10.2	\N	\N	9248629009
20160616-histLocations	scf	tables.xml	2020-09-04 15:43:49.41649	3	EXECUTED	8:7405f2f260af28149829bd6d151175ab	createTable tableName=HIST_LOCATIONS		\N	3.10.2	\N	\N	9248629009
20160616-locations	scf	tables.xml	2020-09-04 15:43:49.448998	4	EXECUTED	8:ece76e12dace24e8062f0ee1cac607f4	createTable tableName=LOCATIONS		\N	3.10.2	\N	\N	9248629009
20160616-locationsHistLocations	scf	tables.xml	2020-09-04 15:43:49.472016	5	EXECUTED	8:cf9f54cab56135b37ef7f5b1d483c2c2	createTable tableName=LOCATIONS_HIST_LOCATIONS; addPrimaryKey constraintName=LOCATIONS_HIST_LOCATIONS_PKEY, tableName=LOCATIONS_HIST_LOCATIONS		\N	3.10.2	\N	\N	9248629009
20160616-obsProperties	scf	tables.xml	2020-09-04 15:43:49.49906	6	EXECUTED	8:d5199566d878b21e25cd50c616de2113	createTable tableName=OBS_PROPERTIES		\N	3.10.2	\N	\N	9248629009

20160616-observations	scf	tables.xml	2020-09-04 15:43:49.518928	7	EXECUTED	8:3675f8e67e3b6a77ac96861c298a47e4	createTable tableName=OBSERVATIONS		\N	3.10.2	\N	\N	9248629009
20160616-sensors	scf	tables.xml	2020-09-04 15:43:49.548587	8	EXECUTED	8:cc52f4bd2b9797d150b9c317cde31c72	createTable tableName=SENSORS		\N	3.10.2	\N	\N	9248629009
20160616-things	scf	tables.xml	2020-09-04 15:43:49.578501	9	EXECUTED	8:b2196190703665c4832d7c4f4c5f66a7	createTable tableName=THINGS		\N	3.10.2	\N	\N	9248629009
20160616-thingsLocations	scf	tables.xml	2020-09-04 15:43:49.599028	10	EXECUTED	8:31f5a685e985e9d4d726a591ca7acc18	createTable tableName=THINGS_LOCATIONS; addPrimaryKey constraintName=THINGS_LOCATIONS_PKEY, tableName=THINGS_LOCATIONS		\N	3.10.2	\N	\N	9248629009
20160616-foreignKeys	scf	tables.xml	2020-09-04 15:43:49.829046	11	EXECUTED	8:e5f47e12dd22e4f77cebbbd5a7bb25dd	addForeignKeyConstraint baseTableName=DATASTREAMS, constraintName=DATASTREAMS_OBS_PROPERTY_ID_FKEY, referencedTableName=OBS_PROPERTIES; addForeignKeyConstraint baseTableName=DATASTREAMS, constraintName=DATASTREAMS_SENSOR_ID_FKEY, referencedTableNa...		\N	3.10.2	\N	\N	9248629009

20160702-names	scf	tables.xml	2020-09-04 15:43:49.8372	12	EXECUTED	8:d525e5087932f82b9088db0ba8821e68	addColumn tableName=THINGS; addColumn tableName=SENSORS; addColumn tableName=LOCATIONS; addColumn tableName=FEATURES; addColumn tableName=DATASTREAMS		\N	3.10.2	\N	\N	9248629009
20160729-phenomenonTimeEnd	scf	tables.xml	2020-09-04 15:43:49.840993	13	EXECUTED	8:7eac23206cbc66c4261b56508970779e	update tableName=OBSERVATIONS		\N	3.10.2	\N	\N	9248629009
20160925-generateFoiForLocation	scf	tables.xml	2020-09-04 15:43:49.858968	14	EXECUTED	8:e53d40fdb9bf6caee4e909c9f5b8ff2a	addColumn tableName=LOCATIONS; sql; dropColumn columnName=GEN_FOI_ID, tableName=THINGS	When generating a FoI, link it to the location it is generated\n            from, not to the Thing. That way when two things have the same location,\n            they use the same generated FoI.	\N	3.10.2	\N	\N	9248629009
20160928-addObservedArea	scf	tables.xml	2020-09-04 15:43:49.865196	15	EXECUTED	8:282cc15b2a8d0b8d1646dd075dc881ed	addColumn tableName=DATASTREAMS		\N	3.10.2	\N	\N	9248629009

20161015-addObservedArea	scf	tables.xml	2020-09-04 15:43:49.874798	16	EXECUTED	8:855c7890eae0b4902425d8bb61fe106b	addColumn tableName=OBSERVATIONS; sql; sql		\N	3.10.2	\N	\N	9248629009
20161116-multiDatastreams	scf	tables.xml	2020-09-04 15:43:49.916593	17	EXECUTED	8:9b3bed200f6c94c6f58152abc2f217fc	createTable tableName=MULTI_DATASTREAMS; addForeignKeyConstraint baseTableName=MULTI_DATASTREAMS, constraintName=MULTI_DATASTREAMS_SENSOR_ID_FKEY, referencedTableName=SENSORS; addForeignKeyConstraint baseTableName=MULTI_DATASTREAMS, constraintName...		\N	3.10.2	\N	\N	9248629009
20161213-indices	scf	tables.xml	2020-09-04 15:43:49.95603	18	EXECUTED	8:47802fa2425041c01a7f31cb9caf1be3	createIndex indexName=DATASTREAMS_OBS_PROPERTY_ID, tableName=DATASTREAMS; createIndex indexName=DATASTREAMS_SENSOR_ID, tableName=DATASTREAMS; createIndex indexName=DATASTREAMS_THING_ID, tableName=DATASTREAMS; createIndex indexName=HIST_LOCATIONS_T...		\N	3.10.2	\N	\N	9248629009
20170519-srids	scf	tables.xml	2020-09-04 15:43:49.98948	19	EXECUTED	8:e36b7bfd343601dc984c989438825527	sql; sql; sql; sql	Explicitly set the SRIDs from 0 to 4326 for PostgreSQL databases.	\N	3.10.2	\N	\N	9248629009

20170929-addedProperties	scf	tables.xml	2020-09-04 15:43:49.993715	20	EXECUTED	8:ea98099ef1604102c9324240031e5abc	addColumn tableName=DATASTREAMS; addColumn tableName=FEATURES; addColumn tableName=LOCATIONS; addColumn tableName=OBS_PROPERTIES; addColumn tableName=SENSORS; addColumn tableName=MULTI_DATASTREAMS	Add properties fields to most entities.	\N	3.10.2	\N	\N	9248629009
2018-05-07-actuationTables	scf	tables.xml	2020-09-04 15:43:50.064103	21	EXECUTED	8:30ca337c6e24cadb7a58a2e9771c025e	createTable tableName=ACTUATORS; createTable tableName=TASKINGCAPABILITIES; createTable tableName=TASKS; addForeignKeyConstraint baseTableName=TASKINGCAPABILITIES, constraintName=TASKINGCAPABILITIES_ACTUATOR_ID_FKEY, referencedTableName=ACTUATORS;...		\N	3.10.2	\N	\N	9248629009
2019-07-10-datastream-phenTime-Fix	scf	tables.xml	2020-09-04 15:43:50.068526	22	EXECUTED	8:63b67eca7a0b67c271e60d0db05253fc	update tableName=DATASTREAMS; update tableName=DATASTREAMS; update tableName=MULTI_DATASTREAMS; update tableName=MULTI_DATASTREAMS		\N	3.10.2	\N	\N	9248629009

2020-05-15-toJsonB-1	scf	tables.xml	2020-09-04 15:43:50.07612	23	EXECUTED	8:5456f56a5ab2e405e80c4fc7bd55ccc9	modifyDataType columnName=PROPERTIES, tableName=ACTUATORS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-2	scf	tables.xml	2020-09-04 15:43:50.089827	24	EXECUTED	8:02f68a05c3fe6611d5115e64c9d3c459	modifyDataType columnName=PROPERTIES, tableName=DATASTREAMS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-3	scf	tables.xml	2020-09-04 15:43:50.096822	25	EXECUTED	8:269571545d89b873afcbc48fc9bff155	modifyDataType columnName=PROPERTIES, tableName=FEATURES	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-4	scf	tables.xml	2020-09-04 15:43:50.1062	26	EXECUTED	8:ecc17263a0443d6a5eb7c0020f2e62d4	modifyDataType columnName=PROPERTIES, tableName=LOCATIONS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-5	scf	tables.xml	2020-09-04 15:43:50.117679	27	EXECUTED	8:cc3050830939d085e10c9712032791f9	modifyDataType columnName=PROPERTIES, tableName=MULTI_DATASTREAMS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009

2020-05-15-toJsonB-6	scf	tables.xml	2020-09-04 15:43:50.131297	28	EXECUTED	8:e9e7aeffbc6e7019219f0de7ef8576c5	modifyDataType columnName=OBSERVATION_TYPES, tableName=MULTI_DATASTREAMS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-7	scf	tables.xml	2020-09-04 15:43:50.143033	29	EXECUTED	8:ff426790ed0555456c8039e798e6defc	modifyDataType columnName=UNIT_OF_MEASUREMENTS, tableName=MULTI_DATASTREAMS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-8	scf	tables.xml	2020-09-04 15:43:50.15452	30	EXECUTED	8:9cef97a26c55d5cf1483b4622408e2ab	modifyDataType columnName=PARAMETERS, tableName=OBSERVATIONS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-9	scf	tables.xml	2020-09-04 15:43:50.166439	31	EXECUTED	8:80c26fa5a34aa0f7041f573b538eaec4	modifyDataType columnName=RESULT_JSON, tableName=OBSERVATIONS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-10	scf	tables.xml	2020-09-04 15:43:50.181628	32	EXECUTED	8:c7c699cb05af1ca5afb2bdb6584beaa7	modifyDataType columnName=RESULT_QUALITY, tableName=OBSERVATIONS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009

2020-05-15-toJsonB-11	scf	tables.xml	2020-09-04 15:43:50.189734	33	EXECUTED	8:f4d0520074648460fdf4ad3805566d9e	modifyDataType columnName=PROPERTIES, tableName=OBS_PROPERTIES	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-12	scf	tables.xml	2020-09-04 15:43:50.199218	34	EXECUTED	8:1d439c2839951f394254a2828d3fe276	modifyDataType columnName=PROPERTIES, tableName=SENSORS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-13	scf	tables.xml	2020-09-04 15:43:50.20946	35	EXECUTED	8:9e9d0b1c11cb5bbe2a1d5379282f2e8a	modifyDataType columnName=TASKING_PARAMETERS, tableName=TASKS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-14	scf	tables.xml	2020-09-04 15:43:50.219765	36	EXECUTED	8:8a0bd408791c95d71375780964b56ef8	modifyDataType columnName=TASKING_PARAMETERS, tableName=TASKINGCAPABILITIES	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
2020-05-15-toJsonB-15	scf	tables.xml	2020-09-04 15:43:50.229514	37	EXECUTED	8:4fc5a8a41d36aa89abb97c65eac4384b	modifyDataType columnName=PROPERTIES, tableName=TASKINGCAPABILITIES	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009

2020-05-15-toJsonB-16	scf	tables.xml	2020-09-04 15:43:50.236485	38	EXECUTED	8:bd023fd46a9335c0102894a414bfea69	modifyDataType columnName=PROPERTIES, tableName=THINGS	Change the json column from TEXT to JSONB.	\N	3.10.2	\N	\N	9248629009
postgresTriggers.sql	scf	tables.xml	2020-09-04 15:43:50.291633	39	EXECUTED	8:8104655922528dd94343d7992f62befd	sqlFile		\N	3.10.2	\N	\N	9248629009
\.


--
-- Data for Name: databasechangeloglock; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public.databasechangeloglock (id, locked, lockgranted, lockedby) FROM stdin;
1	f	\N	\N
\.


--
-- Data for Name: spatial_ref_sys; Type: TABLE DATA; Schema: public; Owner: sensorthings
--

COPY public.spatial_ref_sys (srid, auth_name, auth_srid, srtext, proj4text) FROM stdin;
\.


--
-- Data for Name: geocode_settings; Type: TABLE DATA; Schema: tiger; Owner: sensorthings
--

COPY tiger.geocode_settings (name, setting, unit, category, short_desc) FROM stdin;
\.


--
-- Data for Name: pagc_gaz; Type: TABLE DATA; Schema: tiger; Owner: sensorthings

--

COPY tiger.pagc_gaz (id, seq, word, stdword, token, is_custom) FROM stdin;
\.


--
-- Data for Name: pagc_lex; Type: TABLE DATA; Schema: tiger; Owner: sensorthings
--

COPY tiger.pagc_lex (id, seq, word, stdword, token, is_custom) FROM stdin;
\.


--
-- Data for Name: pagc_rules; Type: TABLE DATA; Schema: tiger; Owner: sensorthings
--

COPY tiger.pagc_rules (id, rule, is_custom) FROM stdin;
\.


--
-- Data for Name: topology; Type: TABLE DATA; Schema: topology; Owner: sensorthings
--

COPY topology.topology (id, name, srid, "precision", hasz) FROM stdin;
\.


--
-- Data for Name: layer; Type: TABLE DATA; Schema: topology; Owner: sensorthings
--

COPY topology.layer (topology_id, layer_id, schema_name, table_name, feature_column, feature_type, level, child_id) FROM stdin;
\.


--
-- Name: ACTUATORS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."ACTUATORS_ID_seq"', 1, false);


--
-- Name: DATASTREAMS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings

--

SELECT pg_catalog.setval('public."DATASTREAMS_ID_seq"', 1, false);


--
-- Name: FEATURES_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."FEATURES_ID_seq"', 1, false);


--
-- Name: HIST_LOCATIONS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."HIST_LOCATIONS_ID_seq"', 1, false);


--
-- Name: LOCATIONS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."LOCATIONS_ID_seq"', 1, false);


--
-- Name: MULTI_DATASTREAMS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."MULTI_DATASTREAMS_ID_seq"', 1, false);


--
-- Name: OBSERVATIONS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."OBSERVATIONS_ID_seq"', 1, false);


--
-- Name: OBS_PROPERTIES_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."OBS_PROPERTIES_ID_seq"', 1, false);



--
-- Name: SENSORS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."SENSORS_ID_seq"', 1, false);


--
-- Name: TASKINGCAPABILITIES_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."TASKINGCAPABILITIES_ID_seq"', 1, false);


--
-- Name: TASKS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."TASKS_ID_seq"', 1, false);


--
-- Name: THINGS_ID_seq; Type: SEQUENCE SET; Schema: public; Owner: sensorthings
--

SELECT pg_catalog.setval('public."THINGS_ID_seq"', 1, false);


--
-- Name: ACTUATORS ACTUATORS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."ACTUATORS"
    ADD CONSTRAINT "ACTUATORS_PKEY" PRIMARY KEY ("ID");


--
-- Name: DATASTREAMS DATASTREAMS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."DATASTREAMS"
    ADD CONSTRAINT "DATASTREAMS_PKEY" PRIMARY KEY ("ID");


--
-- Name: FEATURES FEATURES_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings

--

ALTER TABLE ONLY public."FEATURES"
    ADD CONSTRAINT "FEATURES_PKEY" PRIMARY KEY ("ID");


--
-- Name: HIST_LOCATIONS HIST_LOCATIONS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."HIST_LOCATIONS"
    ADD CONSTRAINT "HIST_LOCATIONS_PKEY" PRIMARY KEY ("ID");


--
-- Name: LOCATIONS_HIST_LOCATIONS LOCATIONS_HIST_LOCATIONS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."LOCATIONS_HIST_LOCATIONS"
    ADD CONSTRAINT "LOCATIONS_HIST_LOCATIONS_PKEY" PRIMARY KEY ("LOCATION_ID", "HIST_LOCATION_ID");


--
-- Name: LOCATIONS LOCATIONS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."LOCATIONS"
    ADD CONSTRAINT "LOCATIONS_PKEY" PRIMARY KEY ("ID");


--
-- Name: MULTI_DATASTREAMS_OBS_PROPERTIES MULTI_DATASTREAMS_OBS_PROPERTIES_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."MULTI_DATASTREAMS_OBS_PROPERTIES"
    ADD CONSTRAINT "MULTI_DATASTREAMS_OBS_PROPERTIES_PKEY" PRIMARY KEY ("MULTI_DATASTREAM_ID", "OBS_PROPERTY_ID", "RANK");



--
-- Name: MULTI_DATASTREAMS MULTI_DATASTREAMS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."MULTI_DATASTREAMS"
    ADD CONSTRAINT "MULTI_DATASTREAMS_PKEY" PRIMARY KEY ("ID");


--
-- Name: OBSERVATIONS OBSERVATIONS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."OBSERVATIONS"
    ADD CONSTRAINT "OBSERVATIONS_PKEY" PRIMARY KEY ("ID");


--
-- Name: OBS_PROPERTIES OBS_PROPERTIES_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."OBS_PROPERTIES"
    ADD CONSTRAINT "OBS_PROPERTIES_PKEY" PRIMARY KEY ("ID");


--
-- Name: SENSORS SENSORS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."SENSORS"
    ADD CONSTRAINT "SENSORS_PKEY" PRIMARY KEY ("ID");


--
-- Name: TASKINGCAPABILITIES TASKINGCAPABILITIES_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."TASKINGCAPABILITIES"
    ADD CONSTRAINT "TASKINGCAPABILITIES_PKEY" PRIMARY KEY ("ID");



--
-- Name: TASKS TASKS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."TASKS"
    ADD CONSTRAINT "TASKS_PKEY" PRIMARY KEY ("ID");


--
-- Name: THINGS_LOCATIONS THINGS_LOCATIONS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."THINGS_LOCATIONS"
    ADD CONSTRAINT "THINGS_LOCATIONS_PKEY" PRIMARY KEY ("THING_ID", "LOCATION_ID");


--
-- Name: THINGS THINGS_PKEY; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."THINGS"
    ADD CONSTRAINT "THINGS_PKEY" PRIMARY KEY ("ID");


--
-- Name: databasechangeloglock databasechangeloglock_pkey; Type: CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public.databasechangeloglock
    ADD CONSTRAINT databasechangeloglock_pkey PRIMARY KEY (id);


--
-- Name: DATASTREAMS_OBS_PROPERTY_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "DATASTREAMS_OBS_PROPERTY_ID" ON public."DATASTREAMS" USING btree ("OBS_PROPERTY_ID");


--
-- Name: DATASTREAMS_SENSOR_ID; Type: INDEX; Schema: public; Owner: sensorthings

--

CREATE INDEX "DATASTREAMS_SENSOR_ID" ON public."DATASTREAMS" USING btree ("SENSOR_ID");


--
-- Name: DATASTREAMS_THING_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "DATASTREAMS_THING_ID" ON public."DATASTREAMS" USING btree ("THING_ID");


--
-- Name: HIST_LOCATIONS_THING_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "HIST_LOCATIONS_THING_ID" ON public."HIST_LOCATIONS" USING btree ("THING_ID");


--
-- Name: LOCATIONS_HIST_LOCATIONS_HIST_LOCATION_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "LOCATIONS_HIST_LOCATIONS_HIST_LOCATION_ID" ON public."LOCATIONS_HIST_LOCATIONS" USING btree ("HIST_LOCATION_ID");


--
-- Name: LOCATIONS_HIST_LOCATIONS_LOCATION_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "LOCATIONS_HIST_LOCATIONS_LOCATION_ID" ON public."LOCATIONS_HIST_LOCATIONS" USING btree ("LOCATION_ID");


--
-- Name: MDOP_MULTI_DATASTREAM_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "MDOP_MULTI_DATASTREAM_ID" ON public."MULTI_DATASTREAMS_OBS_PROPERTIES" USING btree ("MULTI_DATASTREAM_ID");



--
-- Name: MDOP_OBS_PROPERTY_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "MDOP_OBS_PROPERTY_ID" ON public."MULTI_DATASTREAMS_OBS_PROPERTIES" USING btree ("OBS_PROPERTY_ID");


--
-- Name: MULTI_DATASTREAMS_SENSOR_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "MULTI_DATASTREAMS_SENSOR_ID" ON public."MULTI_DATASTREAMS" USING btree ("SENSOR_ID");


--
-- Name: MULTI_DATASTREAMS_THING_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "MULTI_DATASTREAMS_THING_ID" ON public."MULTI_DATASTREAMS" USING btree ("THING_ID");


--
-- Name: OBSERVATIONS_DATASTREAM_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "OBSERVATIONS_DATASTREAM_ID" ON public."OBSERVATIONS" USING btree ("DATASTREAM_ID");


--
-- Name: OBSERVATIONS_FEATURE_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "OBSERVATIONS_FEATURE_ID" ON public."OBSERVATIONS" USING btree ("FEATURE_ID");


--
-- Name: OBSERVATIONS_MULTI_DATASTREAM_ID; Type: INDEX; Schema: public; Owner: sensorthings

--

CREATE INDEX "OBSERVATIONS_MULTI_DATASTREAM_ID" ON public."OBSERVATIONS" USING btree ("MULTI_DATASTREAM_ID");


--
-- Name: TASKINGCAPABILITIES_ACTUATOR_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "TASKINGCAPABILITIES_ACTUATOR_ID" ON public."TASKINGCAPABILITIES" USING btree ("ACTUATOR_ID");


--
-- Name: TASKINGCAPABILITIES_THING_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "TASKINGCAPABILITIES_THING_ID" ON public."TASKINGCAPABILITIES" USING btree ("THING_ID");


--
-- Name: TASKS_TASKINGCAPABILITY_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "TASKS_TASKINGCAPABILITY_ID" ON public."TASKS" USING btree ("TASKINGCAPABILITY_ID");


--
-- Name: THINGS_LOCATIONS_LOCATION_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "THINGS_LOCATIONS_LOCATION_ID" ON public."THINGS_LOCATIONS" USING btree ("LOCATION_ID");


--
-- Name: THINGS_LOCATIONS_THING_ID; Type: INDEX; Schema: public; Owner: sensorthings
--

CREATE INDEX "THINGS_LOCATIONS_THING_ID" ON public."THINGS_LOCATIONS" USING btree ("THING_ID");



--
-- Name: OBSERVATIONS datastreams_actualization_delete; Type: TRIGGER; Schema: public; Owner: sensorthings
--

CREATE TRIGGER datastreams_actualization_delete AFTER DELETE ON public."OBSERVATIONS" FOR EACH ROW EXECUTE PROCEDURE public.datastreams_update_delete();


--
-- Name: OBSERVATIONS datastreams_actualization_insert; Type: TRIGGER; Schema: public; Owner: sensorthings
--

CREATE TRIGGER datastreams_actualization_insert AFTER INSERT ON public."OBSERVATIONS" FOR EACH ROW EXECUTE PROCEDURE public.datastreams_update_insert();


--
-- Name: OBSERVATIONS datastreams_actualization_update; Type: TRIGGER; Schema: public; Owner: sensorthings
--

CREATE TRIGGER datastreams_actualization_update AFTER UPDATE ON public."OBSERVATIONS" FOR EACH ROW EXECUTE PROCEDURE public.datastreams_update_update();


--
-- Name: DATASTREAMS DATASTREAMS_OBS_PROPERTY_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."DATASTREAMS"
    ADD CONSTRAINT "DATASTREAMS_OBS_PROPERTY_ID_FKEY" FOREIGN KEY ("OBS_PROPERTY_ID") REFERENCES public."OBS_PROPERTIES"("ID") ON UPDATE CASCADE ON DELETE CASCADE;



--
-- Name: DATASTREAMS DATASTREAMS_SENSOR_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."DATASTREAMS"
    ADD CONSTRAINT "DATASTREAMS_SENSOR_ID_FKEY" FOREIGN KEY ("SENSOR_ID") REFERENCES public."SENSORS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: DATASTREAMS DATASTREAMS_THING_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."DATASTREAMS"
    ADD CONSTRAINT "DATASTREAMS_THING_ID_FKEY" FOREIGN KEY ("THING_ID") REFERENCES public."THINGS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: HIST_LOCATIONS HIST_LOCATIONS_THING_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."HIST_LOCATIONS"
    ADD CONSTRAINT "HIST_LOCATIONS_THING_ID_FKEY" FOREIGN KEY ("THING_ID") REFERENCES public."THINGS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: LOCATIONS_HIST_LOCATIONS LOCATIONS_HIST_LOCATIONS_HIST_LOCATION_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings

--

ALTER TABLE ONLY public."LOCATIONS_HIST_LOCATIONS"
    ADD CONSTRAINT "LOCATIONS_HIST_LOCATIONS_HIST_LOCATION_ID_FKEY" FOREIGN KEY ("HIST_LOCATION_ID") REFERENCES public."HIST_LOCATIONS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: LOCATIONS_HIST_LOCATIONS LOCATIONS_HIST_LOCATIONS_LOCATION_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."LOCATIONS_HIST_LOCATIONS"
    ADD CONSTRAINT "LOCATIONS_HIST_LOCATIONS_LOCATION_ID_FKEY" FOREIGN KEY ("LOCATION_ID") REFERENCES public."LOCATIONS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MULTI_DATASTREAMS_OBS_PROPERTIES MDOP_MULTI_DATASTREAM_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."MULTI_DATASTREAMS_OBS_PROPERTIES"
    ADD CONSTRAINT "MDOP_MULTI_DATASTREAM_ID_FKEY" FOREIGN KEY ("MULTI_DATASTREAM_ID") REFERENCES public."MULTI_DATASTREAMS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MULTI_DATASTREAMS_OBS_PROPERTIES MDOP_OBS_PROPERTY_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings

--

ALTER TABLE ONLY public."MULTI_DATASTREAMS_OBS_PROPERTIES"
    ADD CONSTRAINT "MDOP_OBS_PROPERTY_ID_FKEY" FOREIGN KEY ("OBS_PROPERTY_ID") REFERENCES public."OBS_PROPERTIES"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MULTI_DATASTREAMS MULTI_DATASTREAMS_SENSOR_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."MULTI_DATASTREAMS"
    ADD CONSTRAINT "MULTI_DATASTREAMS_SENSOR_ID_FKEY" FOREIGN KEY ("SENSOR_ID") REFERENCES public."SENSORS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: MULTI_DATASTREAMS MULTI_DATASTREAMS_THING_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."MULTI_DATASTREAMS"
    ADD CONSTRAINT "MULTI_DATASTREAMS_THING_ID_FKEY" FOREIGN KEY ("THING_ID") REFERENCES public."THINGS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: OBSERVATIONS OBSERVATIONS_DATASTREAM_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."OBSERVATIONS"
    ADD CONSTRAINT "OBSERVATIONS_DATASTREAM_ID_FKEY" FOREIGN KEY ("DATASTREAM_ID") REFERENCES public."DATASTREAMS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;



--
-- Name: OBSERVATIONS OBSERVATIONS_FEATURE_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."OBSERVATIONS"
    ADD CONSTRAINT "OBSERVATIONS_FEATURE_ID_FKEY" FOREIGN KEY ("FEATURE_ID") REFERENCES public."FEATURES"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: OBSERVATIONS OBSERVATIONS_MULTI_DATASTREAM_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."OBSERVATIONS"
    ADD CONSTRAINT "OBSERVATIONS_MULTI_DATASTREAM_ID_FKEY" FOREIGN KEY ("MULTI_DATASTREAM_ID") REFERENCES public."MULTI_DATASTREAMS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: TASKINGCAPABILITIES TASKINGCAPABILITIES_ACTUATOR_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."TASKINGCAPABILITIES"
    ADD CONSTRAINT "TASKINGCAPABILITIES_ACTUATOR_ID_FKEY" FOREIGN KEY ("ACTUATOR_ID") REFERENCES public."ACTUATORS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: TASKINGCAPABILITIES TASKINGCAPABILITIES_THING_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings

--

ALTER TABLE ONLY public."TASKINGCAPABILITIES"
    ADD CONSTRAINT "TASKINGCAPABILITIES_THING_ID_FKEY" FOREIGN KEY ("THING_ID") REFERENCES public."THINGS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: TASKS TASKS_TASKINGCAPABILITY_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."TASKS"
    ADD CONSTRAINT "TASKS_TASKINGCAPABILITY_ID_FKEY" FOREIGN KEY ("TASKINGCAPABILITY_ID") REFERENCES public."TASKINGCAPABILITIES"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: THINGS_LOCATIONS THINGS_LOCATIONS_LOCATION_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."THINGS_LOCATIONS"
    ADD CONSTRAINT "THINGS_LOCATIONS_LOCATION_ID_FKEY" FOREIGN KEY ("LOCATION_ID") REFERENCES public."LOCATIONS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: THINGS_LOCATIONS THINGS_LOCATIONS_THING_ID_FKEY; Type: FK CONSTRAINT; Schema: public; Owner: sensorthings
--

ALTER TABLE ONLY public."THINGS_LOCATIONS"
    ADD CONSTRAINT "THINGS_LOCATIONS_THING_ID_FKEY" FOREIGN KEY ("THING_ID") REFERENCES public."THINGS"("ID") ON UPDATE CASCADE ON DELETE CASCADE;



--
-- PostgreSQL database dump complete
--


stderror:

