version takml_version

buildscript {

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
        classpath('io.swagger:swagger-codegen:2.2.3')
    }
}

apply plugin: 'java-library'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

group = 'com.bbn.takml'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    //maven {url "https://dl.bintray.com/fraunhoferiosb/Maven/"}
    maven { url "local-repo" }
    flatDir {
        dirs 'libs'
    }
}

import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

def swaggerInput = "$rootProject.projectDir/src/main/resources/mistk-model-api.yaml"
def swaggerOutputDir = file("$rootProject.projectDir/build/swagger")
task generateApi {
    inputs.file(swaggerInput)
    outputs.dir(swaggerOutputDir)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerOutputDir.path)
        config.setLang('java')
        config.setAdditionalProperties([
                'invokerPackage': 'com.bbn.takml.mxf.client',
                'modelPackage'  : 'com.bbn.takml.mxf.client.model',
                'apiPackage'    : 'com.bbn.takml.mxf.client.api',
                'dateLibrary'   : 'java8'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

clean.doFirst {
    delete(swaggerOutputDir)
}

configurations {
    swagger
}

sourceSets {
    swagger {
        compileClasspath = configurations.swaggerCompile
        java {
            srcDir file("${project.buildDir.path}/swagger/src/main/java")
        }
    }
    main {
        compileClasspath += swagger.output
        runtimeClasspath += swagger.output
    }
    test {
        compileClasspath += swagger.output
        runtimeClasspath += swagger.output
    }
}

compileSwaggerJava.dependsOn generateApi
classes.dependsOn swaggerClasses
compileJava.dependsOn compileSwaggerJava

ext {
    spring_boot_version = '1.5.6.RELEASE'
    jackson_version = '2.4.2'
    jersey_version = '1.18'
    jodatime_version = '2.3'
    junit_version = '4.8.1'
}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // Use TAK-ML SDK
    implementation 'com.bbn.tak.takml:takml-sdk-shared:0.0.3'
    implementation 'de.fraunhofer.iosb.ilt.FROST-Server:FROST-Server.Core:1.12.0'
    implementation 'de.fraunhofer.iosb.ilt.FROST-Server:FROST-Server.Core.Model:1.12.0'
    implementation 'de.fraunhofer.iosb.ilt.FROST-Server:FROST-Server.HTTP.Common:1.12.0'

    // ROGER
    compile 'com.bbn.roger:roger-core-fullRelease-all:1.2.2-SNAPSHOT'
    compile 'com.bbn.roger:roger-plugin-interfaces:1.2.2-SNAPSHOT'
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.1.0'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    compile group: 'org.reflections', name: 'reflections', version: '0.9.12'

    // MISTK
    swaggerCompile "org.springframework.boot:spring-boot-starter-web:$spring_boot_version"
    swaggerCompile 'io.swagger:swagger-annotations:1.5.16'
    swaggerCompile 'com.squareup.okhttp:okhttp:2.7.5'
    swaggerCompile 'com.squareup.okhttp:logging-interceptor:2.7.5'
    swaggerCompile 'com.google.code.gson:gson:2.8.1'
    compile group: 'io.leangen.geantyref', name: 'geantyref', version: '1.3.11'

    compile sourceSets.swagger.output
    compile group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

    compile "com.sun.jersey:jersey-client:$jersey_version"
    compile "com.sun.jersey.contribs:jersey-multipart:$jersey_version"
    compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.1.5"
    compile "joda-time:joda-time:$jodatime_version"
    compile 'io.swagger:swagger-codegen:2.2.3'

    testCompile "junit:junit:$junit_version"

    runtime 'com.squareup.okhttp:okhttp:2.7.5'
    runtime 'com.squareup.okhttp:logging-interceptor:2.7.5'
    runtime 'com.google.code.gson:gson:2.8.1'
}

shadowJar {
    zip64 true
    exclude "*.java"
}

task getDeps(type: Copy) {
    from sourceSets.main.runtimeClasspath
    into 'dependencies/'
}

publishing {
    repositories {
        mavenLocal()
    }

    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}
